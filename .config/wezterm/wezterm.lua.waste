local wezterm = require "wezterm"
local io = require "io"
local os = require "os"

local LEFT_ARROW = utf8.char(0xff0b3)
local SOLID_LEFT_ARROW = utf8.char(0xff0b2)
local SOLID_RIGHT_ARROW = utf8.char(0xff0b0)
local scrollback_lines = 200000

local COLORS = {
  "#3c1361", "#52307c", "#663a82", "#7c5295", "#b491c8"
}

local function font_with_fallback(name, params)
  return wezterm.font_with_fallback({ name, "JetBrainsMono Nerd Font", "Noto Sans Mono" }, params)
end

local function recompute_padding(window)
  local dims = window:get_dimensions()
  local overrides = window:get_config_overrides() or {}
  if dims.is_full_screen then
    local pad = math.floor(dims.pixel_width / 3)
    overrides.window_padding = { left = pad, right = pad, top = 0, bottom = 0 }
  else
    overrides.window_padding = nil
  end
  window:set_config_overrides(overrides)
end

local function shell_escape(str)
  if not str then return "''" end
  return "'" .. str:gsub("'", "'\\''") .. "'"
end

wezterm.on("plumb-selection", function(window, pane)
  local sel = window:get_selection_text_for_pane(pane)
  if not sel or sel == "" then
    window:toast_notification("Plumb", "No selection!", nil, 3000)
    return
  end
  local escaped = shell_escape(sel)
  window:perform_action(
    wezterm.action {
      SplitHorizontal = {
        args = {
          "nu", "-c", "echo " .. escaped .. " | deno run -A ~/.config/wezterm/plumb.ts | fzf"
        }
      }
    },
    pane
  )
end)

wezterm.on("update-right-status", function(window, pane)
  local success, stdout, _ =
      wezterm.run_child_process({ "deno", "run", "-A", "--quiet", "--no-check", os.getenv("HOME") ..
      "/.config/wezterm/index.ts" })

  local cells = {}
  local cwd_uri = pane:get_current_working_dir()
  if cwd_uri then
    local path = cwd_uri:gsub("^file://", ""):gsub("^localhost", "")
    table.insert(cells, path or "~")
    table.insert(cells, "Hyprland")
  end

  table.insert(cells, wezterm.strftime("%a %b %-d %H:%M"))
  table.insert(cells, stdout and stdout:sub(1, 11) or "")

  local elements = {}
  local num_cells = 0

  table.insert(elements, { Foreground = { Color = "#3c1361" } })
  table.insert(elements, { Text = SOLID_LEFT_ARROW })

  for _, text in ipairs(cells) do
    local idx = num_cells + 1
    table.insert(elements, { Foreground = { Color = "#c0c0c0" } })
    table.insert(elements, { Background = { Color = COLORS[idx] or "#444" } })
    table.insert(elements, { Text = " " .. text .. " " })
    num_cells = idx
    if idx < #cells then
      table.insert(elements, { Foreground = { Color = COLORS[idx + 1] or "#444" } })
      table.insert(elements, { Text = SOLID_LEFT_ARROW })
    end
  end

  window:set_right_status(wezterm.format(elements))
end)

wezterm.on("trigger-nvim-with-scrollback", function(window, pane)
  local lines = pane:get_lines_as_text(scrollback_lines)
  local tmpfile = os.tmpname()
  local f = io.open(tmpfile, "w+")
  if f then
    f:write(lines)
    f:close()
    window:perform_action(wezterm.action { SpawnCommandInNewTab = { args = { "nvim", tmpfile } } }, pane)
    wezterm.sleep_ms(1500)
    os.remove(tmpfile)
  end
end)

wezterm.on("open-uri", function(window, pane, uri)
  if uri:match("^file://") then
    local file = uri:gsub("^file://", "")
    window:perform_action(
      wezterm.action { SpawnCommandInNewWindow = { args = { "nu", "-c", "nvim " .. shell_escape(file) } } },
      pane
    )
    return false
  end
end)

wezterm.on("toggle-ligature", function(window, pane)
  local overrides = window:get_config_overrides() or {}
  if overrides.font then
    overrides.font = nil
    overrides.font_rules = nil
  else
    overrides.font = font_with_fallback("Fira Code", {})
    overrides.font_rules = {
      { italic = false, intensity = "Normal", font = font_with_fallback("Fira Code", {}) },
      { italic = true,  intensity = "Normal", font = font_with_fallback("Fira Code", {}) },
      { italic = false, intensity = "Bold",   font = font_with_fallback("Fira Code", {}) },
      { italic = true,  intensity = "Bold",   font = font_with_fallback("Fira Code", {}) },
    }
  end
  window:set_config_overrides(overrides)
end)

wezterm.on("toggle-opacity", function(window, _)
  local overrides = window:get_config_overrides() or {}
  overrides.window_background_opacity = overrides.window_background_opacity and nil or 0.5
  window:set_config_overrides(overrides)
end)

wezterm.on("window-resized", recompute_padding)
wezterm.on("window-config-reloaded", recompute_padding)

local config = wezterm.config_builder()
config.enable_wayland = false
return {
  font_size = 10.0,
  font_dirs = { os.getenv("HOME") .. "/.local/share/fonts" },
  font = font_with_fallback("JetBrainsMono Nerd Font", {}),
  color_scheme = "Dracula",
  scrollback_lines = scrollback_lines,
  front_end = "OpenGL",
  prefer_egl = true,
  check_for_updates = false,
  default_prog = { "nu" },
  enable_scroll_bar = false,
  window_background_opacity = 0.96,
  text_background_opacity = 1.0,
  window_decorations = "RESIZE",
  exit_behavior = "Hold",
  selection_word_boundary = " \t\n{[}]()\"'",
  initial_cols = 160,
  initial_rows = 40,
  window_padding = { left = 5, right = 5, top = 5, bottom = 5 },
  hide_tab_bar_if_only_one_tab = true,
  use_ime = true,
  leader = { key = "a", mods = "CTRL", timeout_milliseconds = 1000 },
  disable_default_key_bindings = true,
  keys = {
    { key = "f",          mods = "LEADER",    action = "TogglePaneZoomState" },
    { key = "n",          mods = "LEADER",    action = wezterm.action { SpawnTab = "CurrentPaneDomain" } },
    { key = "v",          mods = "LEADER",    action = wezterm.action { SplitVertical = {} } },
    { key = "h",          mods = "LEADER",    action = wezterm.action { SplitHorizontal = {} } },
    { key = "p",          mods = "LEADER",    action = wezterm.action { EmitEvent = "trigger-nvim-with-scrollback" } },
    { key = "x",          mods = "LEADER",    action = wezterm.action { EmitEvent = "toggle-ligature" } },
    { key = "t",          mods = "LEADER",    action = wezterm.action { EmitEvent = "toggle-opacity" } },
    { key = "b",          mods = "LEADER",    action = wezterm.action { EmitEvent = "update-right-status" } },
    { key = "e",          mods = "LEADER",    action = wezterm.action { EmitEvent = "plumb-selection" } },
    -- Resize panes
    { key = "LeftArrow",  mods = "ALT|SHIFT", action = wezterm.action { AdjustPaneSize = { "Left", 5 } } },
    { key = "RightArrow", mods = "ALT|SHIFT", action = wezterm.action { AdjustPaneSize = { "Right", 5 } } },
    { key = "UpArrow",    mods = "ALT|SHIFT", action = wezterm.action { AdjustPaneSize = { "Up", 2 } } },
    { key = "DownArrow",  mods = "ALT|SHIFT", action = wezterm.action { AdjustPaneSize = { "Down", 2 } } },
    -- Move between panes
    { key = "LeftArrow",  mods = "ALT",       action = wezterm.action { ActivatePaneDirection = "Left" } },
    { key = "RightArrow", mods = "ALT",       action = wezterm.action { ActivatePaneDirection = "Right" } },
    { key = "UpArrow",    mods = "ALT",       action = wezterm.action { ActivatePaneDirection = "Up" } },
    { key = "DownArrow",  mods = "ALT",       action = wezterm.action { ActivatePaneDirection = "Down" } },
  },
}
