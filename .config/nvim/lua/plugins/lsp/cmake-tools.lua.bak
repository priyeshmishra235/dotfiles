return {
  "Civitasv/cmake-tools.nvim",
  dependencies = { "nvim-lua/plenary.nvim" },
  cmd = { "CMakeGenerate", "CMakeBuild", "CMakeRun", "CMakeClean",
    "CMakeStopExecutor", "CMakeSelectLaunchTarget", "CMakeSelectCwd",
    "CMakeRunTest", "CMakeSelectBuildPreset", "CMakeSelectBuildDir",
    "CMakeSelectBuildTarget", "CMakeSelectConfigurePreset",
    "CMakeSelectBuildType", "CMakeBui1dCurrentFi1e",
  },
  config = function()
    local function get_project_root()
      local markers = { ".git", "CMakeLists.txt", "compile_commands.json", "Makefile", "package.json" }
      local filepath = vim.api.nvim_buf_get_name(0)
      local path = vim.fs.dirname(filepath)
      local found = nil

      while path and path ~= "/" do
        for _, marker in ipairs(markers) do
          local candidate = path .. "/" .. marker
          if vim.fn.filereadable(candidate) == 1 or vim.fn.isdirectory(candidate) == 1 then
            found = path
          end
        end
        path = vim.fs.dirname(path)
      end

      return found or vim.loop.cwd()
    end

    require("cmake-tools").setup {
      cmake_command = "cmake",
      ctest_command = "ctest",
      cmake_use_preset = false,
      cmake_regenerate_on_save = true, -- auto generate when save CMakeLists.txt
      cmake_generate_options = {
        "-G", "Ninja", "-DCMAKE_EXPORT_COMPILE_COMMANDS=1"
      },
      cmake_build_options = {}, -- this will be passed when invoke `CMakeBuild`
      cmake_build_directory = function()
        return get_project_root() .. "/build"
      end,
      cmake_soft_link_compile_commands = true,   -- this will automatically make a soft link from compile commands file to project root dir

      cmake_compile_commands_from_lsp = false,   -- this will automatically set compile commands file location using lsp, to use it, please set `cmake_soft_link_compile_commands` to false
      cmake_kits_path = nil,                     -- this is used to specify global cmake kits path, see CMakeKits for detailed usage
      cmake_variants_message = {
        short = { show = true },                 -- whether to show short message
        long = { show = true, max_length = 40 }, -- whether to show long message
      },
      cmake_dap_configuration = {
        name = "Launch with codelldb",
        type = "codelldb",
        request = "launch",
        stopOnEntry = false,
        runInTerminal = true,
        console = "integratedTerminal",
        program = function()
          -- Get current filename without extension
          local filename = vim.fn.expand("%:t:r")

          -- Try to guess the executable path
          local exe_path = vim.fn.getcwd() .. "/build/bin/" .. filename

          if vim.fn.filereadable(exe_path) == 1 then
            return exe_path
          else
            return vim.fn.input("Path to executable: ", vim.fn.getcwd() .. "/build/bin/", "file")
          end
        end,
      },
      cmake_executor = {           -- executor to use
        name = "toggleterm",       -- name of the executor
        opts = {},                 -- the options the executor will get, possible values depend on the executor type. See `default_opts` for possible values.
        default_opts = {           -- a list of default and possible values for executors
          toggleterm = {
            direction = "float",   -- 'vertical' | 'horizontal' | 'tab' | 'float'
            close_on_exit = false, -- whether close the terminal when exit
            auto_scroll = true,    -- whether auto scroll to the bottom
            singleton = true,      -- single instance, autocloses the opened one, if present
          },
        },
      },
      cmake_runner = {              -- runner to use
        name = "toggleterm",        -- name of the runner
        opts = {},                  -- the options the runner will get, possible values depend on the runner type. See `default_opts` for possible values.
        default_opts = {            -- a list of default and possible values for runners
          toggleterm = {
            direction = "vertical", -- 'vertical' | 'horizontal' | 'tab' | 'float'
            close_on_exit = false,  -- whether close the terminal when exit
            auto_scroll = true,     -- whether auto scroll to the bottom
            singleton = true,       -- single instance, autocloses the opened one, if present
          },
        },
      },
      cmake_notifications = {
        runner = { enabled = true },
        executor = { enabled = true },
        spinner = { "⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏" }, -- icons used for progress display
        refresh_rate_ms = 100, -- how often to iterate icons
      },
      cmake_virtual_text_support = true, -- Show the target related to current file using virtual text (at right corner)
    }
  end
}
