-- nvim dap utils providing same functionality
-- first see if that works good remove this
return {
  {
    "Weissle/persistent-breakpoints.nvim",
    event = "BufReadPost", -- Automatically load breakpoints on file read
    config = function()
      require("persistent-breakpoints").setup {
        save_dir = vim.fn.stdpath('data') .. '/nvim_checkpoints',
        load_breakpoints_event = { "BufReadPost" },
      }

      -- DAP signs (icons shown in the gutter)
      vim.fn.sign_define('DapBreakpoint', { text = 'â›”', texthl = 'DiagnosticError', linehl = '', numhl = '' })
      vim.fn.sign_define('DapBreakpointCondition', { text = 'ðŸ”¶', texthl = 'DiagnosticWarn', linehl = '', numhl = '' })
      vim.fn.sign_define('DapLogPoint', { text = 'ðŸ’¬', texthl = 'DiagnosticInfo', linehl = '', numhl = '' })

      -- Keymaps for Persistent Breakpoints
      local pb = require('persistent-breakpoints.api')
      local opts = { noremap = true, silent = true }
      vim.keymap.set("n", "<Leader>db", pb.toggle_breakpoint, opts)          -- Toggle
      vim.keymap.set("n", "<Leader>dB", pb.set_conditional_breakpoint, opts) -- Conditional
      vim.keymap.set("n", "<Leader>dc", pb.clear_all_breakpoints, opts)      -- Clear
      vim.keymap.set("n", "<Leader>dl", pb.set_log_point, opts)              -- Log Point
    end,
  },
  {
    "ofirgall/goto-breakpoints.nvim",
    lazy = false,
    config = function()
      local map = vim.keymap.set
      map('n', ']d', require('goto-breakpoints').next, {})
      map('n', '[d', require('goto-breakpoints').prev, {})
      map('n', ']S', require('goto-breakpoints').stopped, {})
    end
  }
}
