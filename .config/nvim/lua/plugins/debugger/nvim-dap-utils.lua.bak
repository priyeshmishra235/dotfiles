return {
  "niuiic/dap-utils.nvim",
  event = 'VeryLazy',
  dependencies = {
    "mfussenegger/nvim-dap",
    "rcarriga/nvim-dap-ui",
    "nvim-telescope/telescope.nvim",
    "niuiic/core.nvim",
    "nvim-telescope/telescope-dap.nvim",
  },
  config = function()
    require("dap-utils").setup({
      ----------------------------------------------------------------------
      --                               C++                                --
      ----------------------------------------------------------------------
      cpp = function(run)
        local core = require("core") -- from niuiic/core.nvim
        local uv = vim.loop

        -- Optional: Build the project with Ninja
        vim.cmd("!cd build && ninja")

        -- 🔍 Find top-level root with CMakeLists.txt (recursive)
        local function find_top_level_cmake(path)
          local prev = nil
          local current = vim.fn.fnamemodify(path, ":p:h")
          while current and current ~= prev do
            if vim.fn.filereadable(current .. "/CMakeLists.txt") == 1 then
              prev = current
              current = vim.fn.fnamemodify(current, ":h")
            else
              break
            end
          end
          return prev
        end

        local root_path = find_top_level_cmake(vim.fn.expand('%:p')) or core.file.root_path()
        local bin_dir = root_path .. "/build/bin/"

        local config = {
          name = "Launch C++ binary",
          type = "codelldb",
          request = "launch",
          program = nil,
          cwd = root_path,
          stopOnEntry = false,
          args = {},
        }

        local executable = {}

        -- Scan build/bin/ for executable files
        local fs = vim.fs or vim.uv or uv -- fallback if needed
        for path, type in fs.dir(bin_dir) do
          if type == "file" then
            local fullpath = bin_dir .. path
            local perm = vim.fn.getfperm(fullpath)
            if string.match(perm, "x", 3) then
              table.insert(executable, path)
            end
          end
        end

        if #executable == 1 then
          config.program = bin_dir .. executable[1]
          run(config)
        elseif #executable > 1 then
          vim.ui.select(executable, { prompt = "Select executable" }, function(choice)
            if not choice then return end
            config.program = bin_dir .. choice
            run(config)
          end)
        else
          vim.ui.input({ prompt = "Path to executable: ", default = bin_dir }, function(input)
            config.program = input
            run(config)
          end)
        end
      end,
    })

    -- Optional Keymaps
    local dap_utils = require("dap-utils")
    local keymap = vim.keymap.set
    keymap("n", "<Leader>dl", function() dap_utils.launch() end, { desc = "Launch Debug" })
    keymap("n", "<Leader>dus", dap_utils.store_breakpoints, { desc = "Store Breakpoints" })
    keymap("n", "<Leader>dur", dap_utils.restore_breakpoints, { desc = "Restore Breakpoints" })
    keymap("n", "<Leader>duw", dap_utils.store_watches, { desc = "Store Watches" })
    keymap("n", "<Leader>dul", dap_utils.restore_watches, { desc = "Restore Watches" })
    keymap("n", "<Leader>dux", dap_utils.remove_watches, { desc = "Remove Watches" })
    keymap("n", "<Leader>dut", dap_utils.toggle_breakpoints, { desc = "Toggle Breakpoints" })
    keymap("n", "<Leader>duf", dap_utils.search_breakpoints, { desc = "Search Breakpoints" })

    keymap("n", "<Leader>df", function()
      dap_utils.search_breakpoints(require("telescope.themes").get_dropdown({
        prompt_title = "Search DAP Breakpoints"
      }))
    end, { desc = "Search Breakpoints (Telescope)" })

    local telescope = require("telescope")
    telescope.load_extension("dap")
    keymap("n", "<Leader>db", "<cmd>Telescope dap list_breakpoints<CR>", { desc = "List Breakpoints (Telescope)" })
    keymap("n", "<Leader>dv", "<cmd>Telescope dap variables<CR>", { desc = "DAP Variables" })
    keymap("n", "<Leader>dfn", "<cmd>Telescope dap frames<CR>", { desc = "DAP Frames" })
  end
}
