return {
  'xeluxee/competitest.nvim',
  lazy = true,
  dependencies = 'MunifTanjim/nui.nvim',
  config = function()
    require('competitest').setup {
      -- Use a different configuration for every different folder (See local configuration)
      local_config_file_name = '.competitest.lua',

      -- Floating window border style: can be "single", "double", "rounded", "solid" or "shadow"
      floating_border = 'rounded',
      -- Highlight group used for popup borders
      floating_border_highlight = 'FloatBorder',

      -- Picker UI settings (for testcase selection)
      picker_ui = {
        -- Ratio between picker width and Neovim width (0 to 1)
        width = 0.2,
        -- Ratio between picker height and Neovim height (0 to 1)
        height = 0.3,
        -- Keyboard mappings for interacting with the picker
        mappings = {
          focus_next = { 'j', '<down>', '<Tab>' }, -- Move to next item
          focus_prev = { 'k', '<up>', '<S-Tab>' }, -- Move to previous item
          close = { '<esc>', '<C-c>', 'q', 'Q' }, -- Close picker
          submit = { '<cr>' }, -- Select testcase
        },
      },

      -- Testcase Editor UI settings
      editor_ui = {
        -- Ratio between editor width and Neovim width
        popup_width = 0.4,
        -- Ratio between editor height and Neovim height
        popup_height = 0.6,
        -- Show line numbers in editor
        show_nu = true,
        -- Show relative line numbers in editor
        show_rnu = false,
        -- Normal mode mappings
        normal_mode_mappings = {
          switch_window = { '<C-h>', '<C-l>', '<C-i>' }, -- Switch between input and output
          save_and_close = '<C-s>', -- Save testcase content and close editor
          cancel = { 'q', 'Q' }, -- Quit without saving
        },
        -- Insert mode mappings
        insert_mode_mappings = {
          switch_window = { '<C-h>', '<C-l>', '<C-i>' },
          save_and_close = '<C-s>',
          cancel = '<C-q>',
        },
      },

      -- Testcase Runner UI settings
      runner_ui = {
        -- Interface used to display testcases ("popup" or "split")
        interface = 'popup',
        -- Show line numbers in selector
        selector_show_nu = false,
        -- Show relative line numbers in selector
        selector_show_rnu = false,
        -- Show line numbers in details windows
        show_nu = true,
        -- Show relative line numbers in details windows
        show_rnu = false,
        -- Keyboard mappings for testcase selector window
        mappings = {
          run_again = 'R', -- Run the selected testcase again
          run_all_again = '<C-r>', -- Run all testcases again
          kill = 'K', -- Kill running testcase
          kill_all = '<C-k>', -- Kill all running testcases
          view_input = { 'i', 'I' }, -- View input (stdin)
          view_output = { 'a', 'A' }, -- View expected output
          view_stdout = { 'o', 'O' }, -- View program output (stdout)
          view_stderr = { 'e', 'E' }, -- View program errors (stderr)
          toggle_diff = { 'd', 'D' }, -- Toggle diff view
          close = { 'q', 'Q' }, -- Close runner UI
        },
        viewer = {
          width = 0.5,
          height = 0.5,
          show_nu = true,
          show_rnu = false,
          close_mappings = { 'q', 'Q' },
        },
      },

      -- Settings for popup-based testcase runner UI
      popup_ui = {
        total_width = 0.8, -- Width ratio relative to Neovim width
        total_height = 0.8, -- Height ratio relative to Neovim height
        layout = {
          { 4, 'tc' },
          { 5, { { 1, 'so' }, { 1, 'si' } } },
          { 5, { { 1, 'eo' }, { 1, 'se' } } },
        },
      },
      split_ui = {
        position = 'right',
        relative_to_editor = true,
        total_width = 0.3,
        vertical_layout = {
          { 1, 'tc' },
          { 1, { { 1, 'so' }, { 1, 'eo' } } },
          { 1, { { 1, 'si' }, { 1, 'se' } } },
        },
        total_height = 0.4,
        horizontal_layout = {
          { 2, 'tc' },
          { 3, { { 1, 'so' }, { 1, 'si' } } },
          { 3, { { 1, 'eo' }, { 1, 'se' } } },
        },
      },
      -- Save current file before running testcases
      save_current_file = true,
      -- Save all opened files before running testcases
      save_all_files = false,
      -- Execution directory for compiler, relative to current file
      compile_directory = '.',
      -- Compilation command per language
      compile_command = {
        c = { exec = 'gcc', args = { '-Wall', '$(FNAME)', '-o', '$(FNOEXT)' } },
        cpp = { exec = 'g++', args = { '-Wall', '$(FNAME)', '-o', '$(FNOEXT)' } },
        rust = { exec = 'rustc', args = { '$(FNAME)' } },
        java = { exec = 'javac', args = { '$(FNAME)' } },
      },

      -- Execution directory for running solutions, relative to current file
      running_directory = '.',
      -- Run command per language
      run_command = {
        c = { exec = './$(FNOEXT)' },
        cpp = { exec = './$(FNOEXT)' },
        rust = { exec = './$(FNOEXT)' },
        python = { exec = 'python', args = { '$(FNAME)' } },
        java = { exec = 'java', args = { '$(FNOEXT)' } },
      },
      multiple_testing = -1,
      -- Maximum time (in milliseconds) allowed for processes to execute before termination
      maximum_time = 5000,
      -- Method used for output comparison: "exact", "squish" (ignores extra spaces), or a custom function
      output_compare_method = 'squish',
      -- View diff between actual and expected output in respective windows
      view_output_diff = false,

      -- Directory where testcases are stored, relative to current file
      testcases_directory = '.',
      -- Whether testcases are stored in a single file
      testcases_use_single_file = false,
      -- Auto-detect testcase storage method
      testcases_auto_detect_storage = true,
      -- Format for single-file testcases storage
      testcases_single_file_format = '$(FNOEXT).testcases',
      -- Format for input testcase files
      testcases_input_file_format = '$(FNOEXT)_input$(TCNUM).txt',
      -- Format for output testcase files
      testcases_output_file_format = '$(FNOEXT)_output$(TCNUM).txt',

      -- Port number for Competitive Companion
      companion_port = 27121,
      -- Notify user when plugin is ready to receive testcases, problems, and contests
      receive_print_message = true,
      template_file = false,
      evaluate_template_modifiers = false,
      date_format = '%c',
      received_files_extension = 'cpp',
      received_problems_path = '$(CWD)/$(PROBLEM).$(FEXT)',
      received_problems_prompt_path = true,
      received_contests_directory = '$(CWD)',
      received_contests_problems_path = '$(PROBLEM).$(FEXT)',
      received_contests_prompt_directory = true,
      received_contests_prompt_extension = true,
      -- Automatically open received problems
      open_received_problems = true,
      -- Automatically open received contests
      open_received_contests = true,
      -- Replace existing testcases when receiving new ones
      replace_received_testcases = false,
    }
  end,
}
