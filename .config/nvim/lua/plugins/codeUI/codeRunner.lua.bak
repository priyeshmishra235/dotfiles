return {
  'CRAG666/code_runner.nvim',
  dependencies = 'akinsho/toggleterm.nvim',
  event = 'VeryLazy',
  config = function()
    require('code_runner').setup {
      mode = 'toggleterm',
      filetype = {
        agda = 'agda $fileName',
        apl = 'apl -f $fileName',
        awk = 'awk -f $fileName',
        c = 'cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir\\$fileNameWithoutExt',
        clojure = 'clojure $fileName',
        cmake = 'cd "$dir" && cmake . && make && ./$(basename "$fileNameWithoutExt")',
        coffee = 'coffee $fileName',
        coq = 'coqc $fileName',
        cpp = 'cd "$dir" && g++ "$fileName" -o "$fileNameWithoutExt" && "$dir\\$fileNameWithoutExt"',
        crystal = 'cd "$dir" && crystal build "$fileName" -o "$fileNameWithoutExt" && ./$(basename "$fileNameWithoutExt")',
        css = 'open $fileName',
        dart = 'dart $fileName',
        d = 'cd "$dir" && dmd "$fileName" && ./$(basename "$fileNameWithoutExt")',
        dockerfile = 'cd "$dir" && docker build -t "$fileNameWithoutExt" . && docker run "$fileNameWithoutExt"',
        elixir = 'elixir $fileName',
        elm = 'elm make $fileName --output="$fileNameWithoutExt.html"',
        erlang = 'escript $fileName',
        fennel = 'fennel $fileName',
        fortran = 'cd "$dir" && gfortran "$fileName" -o "$fileNameWithoutExt" && ./$(basename "$fileNameWithoutExt")',
        forth = 'gforth $fileName',
        fsharp = 'dotnet fsi $fileName',
        go = 'go run $fileName',
        groovy = 'groovy $fileName',
        haskell = 'runhaskell $fileName',
        haxe = 'cd "$dir" && haxe -main "$fileNameWithoutExt" -neko "$fileNameWithoutExt.n" && neko "$fileNameWithoutExt.n"',
        html = 'open $fileName',
        idris = 'idris "$fileName" -o "$fileNameWithoutExt" && ./$(basename "$fileNameWithoutExt")',
        java = 'cd "$dir" && javac "$fileName" && java "$fileNameWithoutExt"',
        javascript = 'node $fileName',
        javascriptreact = 'node $fileName',
        json = 'python3 -m json.tool $fileName',
        julia = 'julia $fileName',
        kotlin = 'cd "$dir" && kotlinc "$fileName" -include-runtime -d "$fileNameWithoutExt.jar" && java -jar "$fileNameWithoutExt.jar"',
        lean = 'lean $fileName',
        less = 'lessc "$fileName" "$fileNameWithoutExt.css"',
        lisp = 'sbcl --script $fileName',
        lua = 'lua $fileName',
        makefile = 'make -f $fileName',
        markdown = 'pandoc "$fileName" -o "$fileNameWithoutExt.html"',
        matlab = 'matlab -batch $fileName',
        mercury = 'mmc --make "$fileNameWithoutExt" && ./$(basename "$fileNameWithoutExt")',
        moonscript = 'moonc $fileName',
        nim = 'nim compile --run "$fileName"',
        objectivec = 'cd "$dir" && gcc "$fileName" -o "$fileNameWithoutExt" -lobjc && ./$(basename "$fileNameWithoutExt")',
        ocaml = 'ocaml $fileName',
        pascal = 'cd "$dir" && fpc "$fileName" && ./$(basename "$fileNameWithoutExt")',
        perl = 'perl $fileName',
        php = 'php $fileName',
        powershell = 'pwsh -File "$fileName"',
        prolog = 'swipl -s $fileName',
        purescript = 'purs compile $fileName',
        python = 'python3 -u "$fileName"',
        qsharp = 'dotnet run "$fileName"',
        racket = 'racket $fileName',
        reason = 'bsb -make-world -w',
        rescript = 'rescript build -with-deps',
        r = 'Rscript "$fileName"',
        rscript = 'Rscript "$fileName"',
        ruby = 'ruby "$fileName"',
        rust = 'cd "$dir" && rustc "$fileName" -o "$fileNameWithoutExt" && "$dir\\$fileNameWithoutExt"',
        sass = 'sass "$fileName" "$fileNameWithoutExt.css"',
        scala = 'scala "$fileName"',
        scheme = 'scheme --script "$fileName"',
        scss = 'sass "$fileName" "$fileNameWithoutExt.css"',
        sed = 'sed -f "$fileName"',
        shellscript = 'bash "$fileName"',
        svelte = 'svelte "$fileName"',
        swift = 'swift "$fileName"',
        tcl = 'tclsh "$fileName"',
        tex = 'pdflatex "$fileName"',
        tsv = "column -s$'\t' -t < \"$fileName\" | less -#2 -N -S",
        typescript = 'deno run "$fileName"',
        typescriptreact = 'ts-node "$fileName"',
        vb = 'cd "$dir" && vbc /nologo "$fileName" && mono "$fileNameWithoutExt.exe"',
        vbscript = 'cscript //Nologo "$fileName"',
        verilog = 'iverilog -o "$fileNameWithoutExt" "$fileName" && vvp "$fileNameWithoutExt"',
        vhdl = 'ghdl -a "$fileName" && ghdl -e "$fileNameWithoutExt" && ghdl -r "$fileNameWithoutExt"',
        vlang = 'cd "$dir" && v "$fileName" && ./$(basename "$fileNameWithoutExt")',
        vue = 'vue-cli-service serve "$fileName"',
        wolfram = 'wolframscript -file "$fileName"',
        xml = 'xmllint --format "$fileName"',
        yaml = 'python3 -c "import yaml, sys; print(yaml.safe_load(sys.stdin.read()))" < "$fileName"',
        zig = 'cd "$dir" && zig build-exe "$fileName" && ./$(basename "$fileNameWithoutExt")',
      }
    }



    -- Keymaps
    local opts = { noremap = true, silent = false }
    vim.keymap.set('n', '<leader>rr', ':RunCode<CR>', opts)
    vim.keymap.set('n', '<leader>rf', ':RunFile<CR>', opts)
    vim.keymap.set('n', '<leader>rft', ':RunFile tab<CR>', opts)
    vim.keymap.set('n', '<leader>rP', ':RunProject<CR>', opts)
    vim.keymap.set('n', '<leader>rc', ':RunClose<CR>', opts)
    vim.keymap.set('n', '<leader>crf', ':CRFiletype<CR>', opts)
    vim.keymap.set('n', '<leader>crp', ':CRProjects<CR>', opts)
  end,
}
